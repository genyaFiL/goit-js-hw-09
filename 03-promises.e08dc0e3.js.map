{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAY/B,OAXgB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAMb,MAAMO,EAAeC,SAASC,cAAc,uBACtCC,EAAcF,SAASC,cAAc,sBACrCE,EAAgBH,SAASC,cAAc,wBACjBD,SAASC,cAAc,yBAK/BG,iBAAiB,SAErC,SAAwBC,GAEtB,GADAA,EAAMC,iBAEJP,EAAaQ,MAAQ,GACE,KAAvBR,EAAaQ,OACbL,EAAYK,MAAQ,GACE,KAAtBL,EAAYK,OACZJ,EAAcI,MAAQ,EAKtB,YAHAC,EAAApB,GAASqB,OAAOC,QACd,mGAIJ,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAcI,MAAOI,GAAK,EAAG,CAC/C,MAAMC,EAAQC,OAAOd,EAAaQ,OAASL,EAAYK,MAAQI,EAG/DrB,EAFiBqB,EAAI,EAEGC,GACrBE,MAAK,EAACvB,SAAEA,EAAQC,MAAEA,MACjBgB,EAAApB,GAASqB,OAAOM,QACd,uBAAqBxB,QAAiBC,MAAU,IAGnDwB,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,MAClBgB,EAAApB,GAASqB,OAAOC,QACd,sBAAoBnB,QAAeC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n\n  return promise;\n}\n\nconst delayInputEl = document.querySelector('input[name=\"delay\"]');\nconst stepInputEl = document.querySelector('input[name=\"step\"]');\nconst amountInputEl = document.querySelector('input[name=\"amount\"]');\nconst createPromisesBtnEl = document.querySelector('button[type=\"submit\"]');\n\n// delayInputEl.value = 1000;\n// stepInputEl.value = 500;\n// amountInputEl.value = 5;\ncreatePromisesBtnEl.addEventListener('click', createPromises);\n\nfunction createPromises(event) {\n  event.preventDefault();\n  if (\n    delayInputEl.value < 0 ||\n    delayInputEl.value === '' ||\n    stepInputEl.value < 0 ||\n    stepInputEl.value === '' ||\n    amountInputEl.value < 1\n  ) {\n    Notiflix.Notify.failure(\n      'Values must be numbers, delay values must not be negative and values of amount greater than \"0\"'\n    );\n    return;\n  }\n  for (let i = 0; i < amountInputEl.value; i += 1) {\n    const delay = Number(delayInputEl.value) + stepInputEl.value * i;\n    const position = i + 1;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","$47d4ff9957288465$var$delayInputEl","document","querySelector","$47d4ff9957288465$var$stepInputEl","$47d4ff9957288465$var$amountInputEl","addEventListener","event","preventDefault","value","$parcel$interopDefault","Notify","failure","i","delay1","Number","then","success","catch"],"version":3,"file":"03-promises.e08dc0e3.js.map"}